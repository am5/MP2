// MP2 kernel module - RMS scheduler 

//  ----------------------
//  Kernel Module Includes
//  ----------------------

#include "mp2_given.h"           // contains function that returns the task_struct associated with a given PID
#include <linux/list.h.  	 // for using the kernel implementation of a circular linked list
#include <linux/sched.h>	 // contains the definition for the PCB of each task 
#include <linux/module.h>	 // contains the definitions for KM functions 
#include <linux/proc_fs.h>       // proc file system include file 
#include <pthread.h> 		 // POSIX thread library for the scheduler - 
#include <linux/kernel.h>        // needed for KERN_INFO - (replaces the need for priority in the printk function)

//  -----------------------
//  RMS scheduler Functions
//  -----------------------
//  Notes: Available through 
//  the proc filesystem 

int REGISTER(pid, period, processing_time) // notifies KM that app wants to use RMS scheduler
{
  
  if (pass_admission_control(PCB) == 1)
  {
    printk("Application 
    registered = true;
  }
  else
  {
    printk("Application did not pass admission control\n");
    registered = false;
  }

  return registered;
}

YIELD(int PID) // notifies RMS scheduler that the application has finished
{
  char * status;
  // block until the next period 
  while(!next_period)
  {
    usleep(100000);
  }

  //finished = true;
  printk("YIELD status: %s\n", status);
}

UNREGISTER(int PID)
{
  // notify the RMS scheduler that the application has finished
  // using the RMS scheduler 
  printk("UNREGISTER status: %s\n", status);
}


int ADMISSION_CONTROL(task_struct)
{
  for(int i = 0; i < len(task_struct))
  {
    if(task_struct[i].processing_time > RESERVED_PROCESSING_TIME)
    {
      return not_admitted;
    }
  }
}

task_t LIST_PROCESSES(/proc/mp2/status) // can return process one at a time; or have a snapshot 
{
  // return the list of registered applications
}

void SCHEDULING_THREAD()
{
  // the real-time scheduling thread
}

void WAKE_UP_TIMER()
{
  // wakes up a tasks that is in READY state 
}

//  ---------------------------
//  Process Control Block (PCB) 
//  ---------------------------

LIST_HEAD(process_list);     		     // initialize an empty linked list

struct mp2_task_struct
{
  struct task_struct* linux_task;	     // pointer to the PCB of the task
                             		     // data structure that represents the PCB 
  struct list_head p_list;                   // to be able to link each element to others
  struct timer_list wakeup_timer;
}process_t;


int ADD_PROCESS(process_t p) 			
{
  //critical section 
  // add process to linked list i.e:
  list_add(&p.p_list, &process_list);
}

int REMOVE_PROCESS(process_t p) 
{
  // critical section
  // remove process from linked list i.e:
  
}